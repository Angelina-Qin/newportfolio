---
import Icon from './Icon.astro';
---

<theme-toggle>
	<button>
		<!-- <span class="sr-only">Dark theme</span> -->
		<span class="icon light"><Icon icon="sun" /></span>
		<span class="icon dark"><Icon icon="moon-stars" /></span>
	</button>
</theme-toggle>

<style>
	:host {
		display: inline-flex;
		align-items: center;
	}

	button {
		display: flex;
		border: 0;
		border-radius: 999rem;
		padding: 0;
		background-color: var(--color-999);
		box-shadow: inset 0 0 0 1px var(--border);
		color: var(--color-100);
		cursor: pointer;
	}

	.icon {
		z-index: 1;
		position: relative;
		display: flex;
		padding: 0.5rem;
		width: 2rem;
		height: 2rem;
		font-size: 1rem;
		color: var(--accent-overlay);
	}

	.icon.light::before {
		content: '';
		z-index: -1;
		position: absolute;
		inset: 0;
		background-color: var(--accent-regular);
		border-radius: 999rem;
	}
	:global(.theme-dark) .icon.light::before {
		transform: translateX(100%);
	}

	:global(.theme-dark) .icon.dark,
	:global(html:not(.theme-dark)) .icon.light,
	button[aria-pressed='false'] .icon.light {
		color: var(--accent-text-over);
	}

	@media (prefers-reduced-motion: no-preference) {
		.icon,
		.icon.light::before {
			transition: transform var(--theme-transition), color var(--theme-transition);
		}
	}

	@media (forced-colors: active) {
		.icon.light::before {
			background-color: SelectedItem;
		}
	}
</style>

<script>
	class ThemeToggle extends HTMLElement {
		constructor() {
			super();
		}

		connectedCallback() {
			const button = this.querySelector('button')!;
			if (!button) {
				console.error('ThemeToggle: Button element not found!'); // 增加错误日志
				return;
			}

			// 添加这行，用于诊断
			console.log('ThemeToggle: Event listener is being attached to this button:', button);

			const setTheme = (dark: boolean) => {
				document.documentElement.classList[dark ? 'add' : 'remove']('theme-dark');
				button.setAttribute('aria-pressed', String(dark));
			};

			button.addEventListener('click', () => {
				// 这是最关键的诊断日志！！！
				console.log('Button was clicked! The theme should now toggle.');

				const isCurrentlyDark = document.documentElement.classList.contains('theme-dark');
				setTheme(!isCurrentlyDark);
			});
			
			const isInitiallyDark = document.documentElement.classList.contains('theme-dark');
			setTheme(isInitiallyDark);
		}
	}
	customElements.define('theme-toggle', ThemeToggle);
</script>
