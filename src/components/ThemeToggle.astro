---
// 保持你的 Icon 引用
import Icon from './Icon.astro';
---

<theme-toggle>
  <button aria-pressed="false">
    <span class="icon light"><Icon icon="sun" /></span>
    <span class="icon dark"><Icon icon="moon-stars" /></span>
  </button>
</theme-toggle>

<style>
  :host { display:inline-flex; align-items:center; }
  button {
    display:flex; border:0; border-radius:999rem; padding:0;
    background-color: var(--color-999);
    /* 你之前已经把描边换成统一变量了，也可以用 card-border 保持一致 */
    box-shadow: inset 0 0 0 1px var(--card-border, var(--border));
    color: var(--color-100); cursor:pointer;
  }
  .icon { z-index:1; position:relative; display:flex; padding:.5rem; width:2rem; height:2rem; font-size:1rem; color:var(--accent-overlay); }
  .icon.light::before { content:''; z-index:-1; position:absolute; inset:0; background-color:var(--accent-regular); border-radius:999rem; }
  :global(.theme-dark) .icon.light::before { transform: translateX(100%); }
  :global(.theme-dark) .icon.dark,
  :global(html:not(.theme-dark)) .icon.light,
  button[aria-pressed='false'] .icon.light { color: var(--accent-text-over); }
  @media (prefers-reduced-motion: no-preference) {
    .icon, .icon.light::before { transition: transform var(--theme-transition), color var(--theme-transition); }
  }
  @media (forced-colors: active) { .icon.light::before { background-color: SelectedItem; } }
</style>

<script>
  class ThemeToggle extends HTMLElement {
    connectedCallback() {
      const button = this.querySelector('button');
      if (!button) return;

      // 读取初始状态（优先 localStorage）
      let isDark = document.documentElement.classList.contains('theme-dark');
      try {
        const stored = localStorage.getItem('theme');
        if (stored === 'dark') isDark = true;
        if (stored === 'light') isDark = false;
      } catch {}

      const applyTheme = () => {
        document.documentElement.classList.toggle('theme-dark', isDark);
        button.setAttribute('aria-pressed', String(isDark));
        try { localStorage.setItem('theme', isDark ? 'dark' : 'light'); } catch {}
      };

      button.addEventListener('click', () => {
        isDark = !isDark;
        applyTheme();
      });

      applyTheme();
    }
  }

  if (!customElements.get('theme-toggle')) {
    customElements.define('theme-toggle', ThemeToggle);
  }
</script>

